#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Не ЭтоWindowsСервер() Тогда
		ВызватьИсключение "Обработка работает только на сервере под управлением ОС Windows.";
	КонецЕсли;

	НомерДействия = -1;

	ПрочитатьКаталог();

	УстановитьДоступностьКнопокВпередНазад();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтображатьСкрытыеФайлыПриИзменении(Элемент)
	ОбновитьТекущийКаталог();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФайлНаКлиенте(ТекущиеДанные.ПолноеИмя);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Вверх(Команда)
	ПрочитатьКаталог(ПереходВверх(ТекущийПуть));
КонецПроцедуры

&НаКлиенте
Процедура СкачатьФайл(Команда)

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолноеИмя", ТекущиеДанные.ПолноеИмя);
	ОписаниеОповещения = Новый ОписаниеОповещения("СкачатьФайлВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ПроверитьРазмерФайла(ТекущиеДанные.ПолноеИмя, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФайлНаКлиенте(ТекущиеДанные.ПолноеИмя);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ТекущиеДанные.ПолноеИмя);

	ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ПоказатьВопрос(ОписаниеОповещения,
		"Удаление происходит непосредственно - без помещения файла в корзину. Удалить выбранный файл?",
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗагрузку(Команда)
	ОтменитьЗагрузкуФайловНаСервер = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьТекущийКаталог();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводНаименованияПапкиЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, "Новая папка", "Имя папки", 255, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СвойстваФайла(Команда)

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму(
		"ВнешняяОбработка.ФайловыйМенеджерВКонтекстеСервера.Форма.СвойстваФайла", Новый Структура("ПолноеИмяФайла",
		ТекущиеДанные.ПолноеИмя), ЭтотОбъект, , , , Новый ОписаниеОповещения("СвойстваФайлаЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыНаСервер(Команда)

	Если ИдетЗагрузкаФайлов Тогда
		Возврат;
	КонецЕсли;

	ИдетЗагрузкаФайлов = Истина;

	ОтменитьЗагрузкуФайловНаСервер = Ложь;
	ПрогрессЗагрузки = 0;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Путь", ТекущийПуть);

	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗагрузитьФайлыНаСерверЗавершение", ЭтотОбъект,
		ДополнительныеПараметры);
	ОписаниеОповещенияОХоде = Новый ОписаниеОповещения("ЗагрузитьФайлыНаСерверХодВыполнения", ЭтотОбъект,
		ДополнительныеПараметры);
	ОписаниеОповещенияПередНачалом = Новый ОписаниеОповещения("ЗагрузитьФайлыНаСерверПередНачалом", ЭтотОбъект,
		ДополнительныеПараметры);
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов("Выберите загружаемые файлы", Истина);

	НачатьПомещениеФайловНаСервер(ОписаниеОповещенияОЗавершении, ОписаниеОповещенияОХоде,
		ОписаниеОповещенияПередНачалом, ПараметрыДиалога, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПеремещениеФайлаВКонтекстеСервера(Команда)

	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПеремещаемыйФайлПолноеИмя = ТекущиеДанные.ПолноеИмя;

	Элементы.ГруппаКопированиеПеремещениеФайла.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьФайлНаСервере(Команда)

	НачатьПеремещениеФайлаВКонтекстеСервера("Перемещение");

КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлНаСервере(Команда)

	НачатьПеремещениеФайлаВКонтекстеСервера("Копирование");

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПеремещениеФайлаНаСервере(Команда)
	Элементы.ГруппаКопированиеПеремещениеФайла.Видимость = Ложь;
	ПеремещаемыйФайлПолноеИмя = "";
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ВосстановитьПредыдущееДействие();
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	ВосстановитьСледующееДействие();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьУстройстваИДискиКомпьютера()

	Результат = Новый Массив;

	Попытка

		FSO = Новый COMОбъект("Scripting.FileSystemObject");

		Для Каждого Диск Из FSO.Drives Цикл

			ОписаниеДиска = Новый Структура;
			ОписаниеДиска.Вставить("БукваДиска", Диск.DriveLetter);
			ОписаниеДиска.Вставить("Путь", Диск.Path);
			ОписаниеДиска.Вставить("ИмяВСети", Диск.ShareName);
			ОписаниеДиска.Вставить("ИмяНаКомпьютере", Диск.VolumeName);
			ОписаниеДиска.Вставить("ТипДиска", Диск.DriveType);

			ИмяТипаДиска = "";
			Если Диск.DriveType = 1 Тогда
				ИмяТипаДиска = "Flash накопитель";
			ИначеЕсли Диск.DriveType = 2 Тогда
				ИмяТипаДиска = "Локальный диск";
			ИначеЕсли Диск.DriveType = 3 Тогда
				ИмяТипаДиска = "Сетевой диск";
			ИначеЕсли Диск.DriveType = 4 Тогда
				ИмяТипаДиска = "CD/DVD дисковод";
			КонецЕсли;
			ОписаниеДиска.Вставить("ИмяТипаДиска", ИмяТипаДиска);

			Результат.Добавить(ОписаниеДиска);
		КонецЦикла;

	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка при чтении локальных дисков.";
		Сообщение.Сообщить();
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Возвращает Истина, если текущий сеанс выполняется на сервере, работающем под управлением ОС Windows.
//
// Возвращаемое значение:
//  Булево - Истина, если сервер работает под управлением ОС Windows.
//
&НаСервере
Функция ЭтоWindowsСервер()

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Или СистемнаяИнформация.ТипПлатформы
		= ТипПлатформы.Windows_x86_64;

КонецФункции

&НаКлиенте
Процедура ФайлыЗагруженыОповещениеПриНажатии(ДополнительныеПараметры) Экспорт

	ПрочитатьКаталог(ДополнительныеПараметры.Путь);

КонецПроцедуры

#Область РаботаСФайлами

&НаСервереБезКонтекста
Функция СвойстваФайлаВКонтекстеСервера(ПолноеИмя)

	Файл = Новый Файл(ПолноеИмя);

	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("ЭтоФайл", Файл.ЭтоФайл());
	СвойстваФайла.Вставить("ЭтоКаталог", Файл.ЭтоКаталог());
	СвойстваФайла.Вставить("Имя", Файл.Имя);
	СвойстваФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	СвойстваФайла.Вставить("ПолноеИмя", Файл.ПолноеИмя);
	СвойстваФайла.Вставить("Существует", Файл.Существует());
	СвойстваФайла.Вставить("Расширение", Файл.Расширение);

	Возврат СвойстваФайла;

КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьФайлНаСервереВоВременноеХранилище(Знач ПутьКФайлу, Адрес)

	Файл = Новый Файл(ПутьКФайлу);

	ИмяПолучаемогоФайла = Файл.Имя;

	Если Файл.ЭтоКаталог() Тогда
		ПолноеИмяZIPФайла = ПолучитьИмяВременногоФайла(".zip");
		ZIPФайл = Новый ЗаписьZipФайла(ПолноеИмяZIPФайла, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Минимальный);
		ZIPФайл.Добавить(ПутьКФайлу + "\*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		ZIPФайл.Записать();

		ИмяПолучаемогоФайла = ИмяПолучаемогоФайла + ".zip";

		ПутьКФайлу = ПолноеИмяZIPФайла;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу),
		Адрес));
	Результат.Вставить("ИмяПолучаемогоФайла", ИмяПолучаемогоФайла); 
	
	УдалитьФайлы(ПолноеИмяZIPФайла);

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Процедура ПереместитьФайлВКонтекстеСервера(ИмяФайлаИсточника, ИмяФайлаПриемника)

	Файл = Новый Файл(ИмяФайлаИсточника);
	Если Файл.ЭтоКаталог() Тогда

	КонецЕсли;

	ПереместитьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КопироватьФайлВКонтекстеСервера(ИмяФайлаИсточника, ИмяФайлаПриемника)
	//@skip-check object-deprecated
	КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлВКонтекстеСервера(ИмяФайла)

	Попытка
		УдалитьФайлы(ИмяФайла);
		ОбновитьТекущийКаталог();
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура СоздатьКаталогВКонтекстеСервера(Путь)
	СоздатьКаталог(Путь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазмерФайлаВКонтекстеСервера(ПолноеИмяФайла)

	Файл = Новый Файл(ПолноеИмяФайла);

	Размер = 0;

	Если Файл.ЭтоФайл() Тогда
		Размер = Файл.Размер();
	Иначе // Это каталог. Ищем все файлы в каталоге и подкаталогах и возвращаем сумму размеров всех файлов
		ФайлыКаталога = НайтиФайлы(ПолноеИмяФайла, "*", Истина);
		Для Каждого Файл Из ФайлыКаталога Цикл
			//@skip-check empty-except-statement
			Попытка
				Размер = Размер + Файл.Размер();
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;

	Возврат Размер;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеРазмераФайла(Знач Размер)

	Если Размер < 1024 Тогда
		Возврат Строка(Размер) + " Б";
	ИначеЕсли Размер < (1024 * 1024) Тогда
		Возврат Строка(Окр(Размер / 1024, 0)) + " КБ";
	ИначеЕсли Размер < (1024 * 1024 * 1024) Тогда
		Возврат Строка(Окр(Размер / 1024 / 1024, 2)) + " МБ";
	ИначеЕсли Размер < (1024 * 1024 * 1024 * 1024) Тогда
		Возврат Строка(Окр(Размер / 1024 / 1024 / 1024, 2)) + " ГБ";
	Иначе
		Возврат Строка(Окр(Размер / 1024 / 1024 / 1024 / 1024, 2)) + " ТБ";
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаписатьФайлВКонтекстеСервера(АдресВоВременномХранилище, ПолноеИмяФайла)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ДвоичныеДанные.Записать(ПолноеИмяФайла);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(ТекстСообщения)

	Сообщение = Новый СообщениеПользователю;
	Сообщение = ТекстСообщения;

	Сообщение.Сообщить();

КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура ПроверитьРазмерФайла(ПолноеИмя, ОписаниеОповещения)

	Размер = ПолучитьРазмерФайлаВКонтекстеСервера(ПолноеИмя);

	Если Размер > (50 * 1024 * 1024) Тогда
		ТекстВопроса = "Размер файла большой (%1) и может надолго повесить программу. Продолжить";
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ПредставлениеРазмераФайла(Размер));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьПеремещениеФайлаВКонтекстеСервера(РежимРаботы = "Перемещение")

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимРаботы", РежимРаботы);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПеремещениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ПроверитьРазмерФайла(ПеремещаемыйФайлПолноеИмя, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	СвойстваФайла = СвойстваФайлаВКонтекстеСервера(ПеремещаемыйФайлПолноеИмя);

	Если ДополнительныеПараметры.РежимРаботы = "Перемещение" Тогда
		ПереместитьФайлВКонтекстеСервера(ПеремещаемыйФайлПолноеИмя, ТекущийПуть + СвойстваФайла.Имя);
	ИначеЕсли ДополнительныеПараметры.РежимРаботы = "Копирование" Тогда
		КопироватьФайлВКонтекстеСервера(ПеремещаемыйФайлПолноеИмя, ТекущийПуть + СвойстваФайла.Имя);
	КонецЕсли;

	ПеремещаемыйФайлПолноеИмя = "";
	Элементы.ГруппаКопированиеПеремещениеФайла.Видимость = Ложь;
	ОбновитьТекущийКаталог();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлНаКлиенте(ПолноеИмя)

	СвойстваФайла = СвойстваФайлаВКонтекстеСервера(ПолноеИмя);

	Если Не СвойстваФайла.Существует Тогда
		Возврат;
	КонецЕсли;

	Если СвойстваФайла.ЭтоКаталог Тогда
		ПрочитатьКаталог(ПолноеИмя);
	ИначеЕсли СвойстваФайла.ЭтоФайл Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПолноеИмя", ПолноеИмя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлВопросЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);

		ПроверитьРазмерФайла(ПолноеИмя, ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		СвойстваФайла = СвойстваФайлаВКонтекстеСервера(ДополнительныеПараметры.ПолноеИмя);
		//@skip-check missing-temporary-file-deletion
#Если ВебКлиент Тогда
		ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + СвойстваФайла.Расширение;
#Иначе
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(СвойстваФайла.Расширение);
#КонецЕсли

		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ОткрытьФайлПолучениеФайлаЗавершение", ЭтотОбъект);

		ПараметрыПолучаемогоФайла = ПоместитьФайлНаСервереВоВременноеХранилище(ДополнительныеПараметры.ПолноеИмя,
			УникальныйИдентификатор);
		НачатьПолучениеФайлаССервера(ОписаниеОповещенияОЗавершении,
			ПараметрыПолучаемогоФайла.АдресВоВременномХранилище, ИмяВременногоФайла);
	КонецЕсли
	;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПолучениеФайлаЗавершение(ПолученныйФайл, ДополнительныеПараметры) Экспорт

	Если ПолученныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗапуститьПриложение(ПолученныйФайл.ПолноеИмя, , Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СкачатьФайлВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыПолучаемогоФайла = ПоместитьФайлНаСервереВоВременноеХранилище(ДополнительныеПараметры.ПолноеИмя,
			УникальныйИдентификатор);
		НачатьПолучениеФайлаССервера(ПараметрыПолучаемогоФайла.АдресВоВременномХранилище,
			ПараметрыПолучаемогоФайла.ИмяПолучаемогоФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалениеФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьФайлВКонтекстеСервера(ДополнительныеПараметры.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьКаталог(Путь = "", ЗаписатьВИсториюДействий = Истина)

	Если ПустаяСтрока(Путь) Тогда
		ОписаниеДисков = ПолучитьУстройстваИДискиКомпьютера();

		Файлы.Очистить();

		Для Каждого ОписаниеДиска Из ОписаниеДисков Цикл
			СтрокаФайлов = Файлы.Добавить();
			СтрокаФайлов.ПолноеИмя = ОписаниеДиска.БукваДиска + ":\";
			СтрокаФайлов.ЭтоКаталог = Истина;

			ЧастиИмениДиска = Новый Массив;
			Если ЗначениеЗаполнено(ОписаниеДиска.ИмяНаКомпьютере) Тогда
				ЧастиИмениДиска.Добавить(ОписаниеДиска.ИмяНаКомпьютере);
			Иначе
				ЧастиИмениДиска.Добавить(ОписаниеДиска.ИмяТипаДиска);
			КонецЕсли;

			Если ОписаниеДиска.ТипДиска = 3 И ЗначениеЗаполнено(ОписаниеДиска.ИмяВСети) Тогда
				ЧастиИмениДиска.Добавить("(" + ОписаниеДиска.ИмяВСети + ")");
			КонецЕсли;

			ЧастиИмениДиска.Добавить("(" + ОписаниеДиска.Путь + ")");

			СтрокаФайлов.ИмяБезрасширения = СтрСоединить(ЧастиИмениДиска, " ");
		КонецЦикла;
	Иначе
		Файл = Новый Файл(Путь);

		Если Не Файл.Существует() Тогда
			СообщитьПользователю("Путь " + Путь + " не существует");
			Возврат;
		ИначеЕсли Файл.ЭтоФайл() Тогда
			Возврат;
		КонецЕсли;

		Файлы.Очистить();

		ТекущийПуть = Путь;

		ФайлыВКаталоге = НайтиФайлы(Путь, "*", Ложь);

		Для Каждого ФайлВКаталоге Из ФайлыВКаталоге Цикл
			Если ФайлВКаталоге.ПолучитьНевидимость() И Не ОтображатьСкрытыеФайлы Тогда
				Продолжить;
			КонецЕсли;

			СтрокаФайлов = Файлы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФайлов, ФайлВКаталоге);
			СтрокаФайлов.ЭтоКаталог = ФайлВКаталоге.ЭтоКаталог();
			Если СтрокаФайлов.ЭтоКаталог Тогда
				СтрокаФайлов.Расширение = "";
				СтрокаФайлов.Имя = ФайлВКаталоге.Имя;
				СтрокаФайлов.ИмяБезРасширения = ФайлВКаталоге.Имя;
			Иначе
				СтрокаФайлов.ДатаИзменения = ФайлВКаталоге.ПолучитьВремяИзменения();
				СтрокаФайлов.Размер = ПредставлениеРазмераФайла(ФайлВКаталоге.Размер());
			КонецЕсли;
		КонецЦикла;

		Файлы.Сортировать("ЭтоКаталог УБЫВ, Имя ВОЗР");
	КонецЕсли;

	ТекущийПуть = Путь;

	Если Прав(ТекущийПуть, 1) <> "\" И Не ПустаяСтрока(ТекущийПуть) Тогда
		ТекущийПуть = ТекущийПуть + "\";
	КонецЕсли;

	ПустойПуть = ПустаяСтрока(ТекущийПуть);

	Элементы.ФайлыКонтекстноеМенюСкачатьФайл.Доступность = Не ПустойПуть;
	Элементы.ФайлыКонтекстноеМенюУдалитьФайл.Доступность = Не ПустойПуть;
	Элементы.ФайлыКонтекстноеМенюСоздатьПапку.Доступность = Не ПустойПуть;
	Элементы.ФайлыКонтекстноеМенюСвойстваФайла.Доступность = Не ПустойПуть;
	Элементы.ФайлыКонтекстноеМенюНачатьПеремещениеФайла.Доступность = Не ПустойПуть;
	Элементы.ЗагрузитьФайлыНаСервер.Доступность = Не ПустойПуть;
	Элементы.ФайлыВверх.Доступность = Не ПустойПуть;
	Элементы.ПереместитьФайл.Доступность = Не ПустойПуть;
	Элементы.КопироватьФайл.Доступность = Не ПустойПуть;

	Если ЗаписатьВИсториюДействий Тогда
		ЗапомнитьДействие(ТекущийПуть);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереходВверх(Путь)

	ПутьПоЧастям = СтрРазделить(Путь, "\", Ложь);
	КоличествоЧастей = ПутьПоЧастям.Количество();
	Если КоличествоЧастей > 0 Тогда
		ПутьПоЧастям.Удалить(КоличествоЧастей - 1);
	КонецЕсли;

	Возврат СтрСоединить(ПутьПоЧастям, "\");

КонецФункции

&НаСервере
Процедура ОбновитьТекущийКаталог()
	ПрочитатьКаталог(ТекущийПуть);
КонецПроцедуры

&НаКлиенте
Процедура СвойстваФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбновитьТекущийКаталог();

КонецПроцедуры

&НаКлиенте
Процедура ВводНаименованияПапкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли
	;

	Если ПустаяСтрока(Результат) Тогда
		СообщитьПользователю("Неверное имя папки");
		Возврат;
	КонецЕсли;

	СоздатьКаталогВКонтекстеСервера(ТекущийПуть + "\" + Результат);

	ОбновитьТекущийКаталог();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыНаСерверПередНачалом(ПомещаемыеФайлы, ОтказОтПомещенияВсехФайлов, ДополнительныеПараметры) Экспорт

	Элементы.ГруппаПрогрессЗагрузкиФайловНаСервер.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыНаСерверХодВыполнения(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ПомещеноВсего,
	ОтказОтПомещенияВсехФайлов, ДополнительныеПараметры) Экспорт

	ПрогрессЗагрузки = ПомещеноВсего;
	ОтказОтПомещенияВсехФайлов = ОтменитьЗагрузкуФайловНаСервер;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыНаСерверЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	Элементы.ГруппаПрогрессЗагрузкиФайловНаСервер.Видимость = Ложь;

	ОтменитьЗагрузкуФайловНаСервер = Ложь;
	ПрогрессЗагрузки = 0;
	ИдетЗагрузкаФайлов = Ложь;

	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ОписаниеПомещенногоФайла Из ПомещенныеФайлы Цикл
		Если ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
			Продолжить;
		КонецЕсли;

		Попытка
			ЗаписатьФайлВКонтекстеСервера(ОписаниеПомещенногоФайла.Адрес, ДополнительныеПараметры.Путь
				+ ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;

	Если ТекущийПуть = ДополнительныеПараметры.Путь Тогда
		ОбновитьТекущийКаталог();
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлыЗагруженыОповещениеПриНажатии", ЭтотОбъект,
		ДополнительныеПараметры);
	ПоказатьОповещениеПользователя("Загрузка файлов завершена", ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти

#Область ИсторияДействий

&НаСервере
Процедура ЗапомнитьДействие(Путь)

	НомерДействия = НомерДействия + 1;

	КоличествоЗаписейИстории = ИсторияДействий.Количество();
	ОбратныйИндекс = КоличествоЗаписейИстории - 1;

	Пока ОбратныйИндекс >= 1 Цикл
		СтрокаИсторииДействий = ИсторияДействий[ОбратныйИндекс];

		Если СтрокаИсторииДействий.Номер >= НомерДействия Тогда
			ИсторияДействий.Удалить(ОбратныйИндекс);
			КоличествоЗаписейИстории = КоличествоЗаписейИстории - 1;
		Иначе
			Прервать;
		КонецЕсли;

		ОбратныйИндекс = ОбратныйИндекс - 1;
	КонецЦикла;

	НоваяСтрокаИстории = ИсторияДействий.Добавить();
	НоваяСтрокаИстории.Номер = НомерДействия;
	НоваяСтрокаИстории.Путь = Путь;
	КоличествоЗаписейИстории = КоличествоЗаписейИстории + 1;

	Если КоличествоЗаписейИстории > 0 Тогда
		НомерДействияМаксимальный = ИсторияДействий[КоличествоЗаписейИстории - 1].Номер;
	КонецЕсли;

	УстановитьДоступностьКнопокВпередНазад();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьПредыдущееДействие()

	Если НомерДействия > 0 Тогда
		НомерДействия = НомерДействия - 1;
	КонецЕсли;

	ВосстановитьДействие();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСледующееДействие()

	НомерДействия = НомерДействия + 1;

	ВосстановитьДействие();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьДействие()

	СтрокиИсторийДействий = ИсторияДействий.НайтиСтроки(Новый Структура("Номер", НомерДействия));

	Если СтрокиИсторийДействий.Количество() > 0 Тогда
		ПрочитатьКаталог(СтрокиИсторийДействий[0].Путь, Ложь);
	КонецЕсли;

	УстановитьДоступностьКнопокВпередНазад();

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокВпередНазад()

	Элементы.Назад.Доступность = НомерДействия > 0;
	Элементы.Вперед.Доступность = НомерДействия < НомерДействияМаксимальный;

КонецПроцедуры

#КонецОбласти

#КонецОбласти